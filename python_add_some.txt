1. unique values in each column

for col in list(df):
    print(col, ": ", df[col].unique())
   

2. #missing data
total = df_train.isnull().sum().sort_values(ascending=False)
percent = (df_train.isnull().sum()/df_train.isnull().count()).sort_values(ascending=False)
missing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])
missing_data.head(20)

3. df['colour'].value_counts().plot(kind='bar')

import seaborn as sns
 sns.set(style="darkgrid")
 titanic = sns.load_dataset("titanic")
 ax = sns.countplot(x="class", data=titanic)

# import seaborn and alias it as sns
import seaborn as sns

###*                               ## fonts
# Bigger than normal fonts
sns.set(font_scale=1.5)

###*                               ## plottin
# make a barplot of your, chosen categorical, column from the dataframe
sns.countplot(catPlotDF['HUNDEFARBE']).set_title("Zurich: Dog colors")


#correlation matrix
corrmat = df_train.corr()
f, ax = plt.subplots(figsize=(12, 9))
sns.heatmap(corrmat, vmax=.8, square=True);


#saleprice correlation matrix
k = 10 #number of variables for heatmap
cols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index
cm = np.corrcoef(df_train[cols].values.T)
sns.set(font_scale=1.25)
hm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)
plt.show()

#convert categorical variable into dummy
df_train = pd.get_dummies(df_train)

 # https://www.analyticsvidhya.com/blog/2016/01/12-pandas-techniques-python-data-manipulation/

df.groupby('A').sum()
 df.groupby(['A', 'B']).sum()
 pd.isna(df1)
 df1.dropna(how='any')
 df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + ['E'])
 df[df.A > 0]
 df.sort_index(axis=1, ascending=False)
 df.sort_values(by='B')
 pd.read_excel('foo.xlsx', 'Sheet1', index_col=None, na_values=['NA'])

#Create a new function:
def num_missing(x):
  return sum(x.isnull())

#Applying per column:
print "Missing values per column:"
print data.apply(num_missing, axis=0) #axis=0 defines that function is to be applied on each column

#Applying per row:
print "\nMissing values per row:"
print data.apply(num_missing, axis=1).head() #axis=1 defines that function is to be applied on each row




events_data[['user_id', 'day', 'timestamps']].drop_duplicates(subsets=['user_id', 'day'])\
                    .groupby('user_id')['timestamps'].apply(list)\
                    .apply(np.diff) #diff between 2 values of user - first and last

# union lists rows
gap_data = pd.Series(np.concatenate(gap_data, axis = 0)

gap_data[gap_data<200].hist()
gap_data.quintile(0.9)



 # https://www.analyticsvidhya.com/blog/2016/01/12-pandas-techniques-python-data-manipulation/

df.groupby('A').sum()
 df.groupby(['A', 'B']).sum()
 pd.isna(df1)
 df1.dropna(how='any')
 df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + ['E'])
 df[df.A > 0]
 df.sort_index(axis=1, ascending=False)
 df.sort_values(by='B')
 pd.read_excel('foo.xlsx', 'Sheet1', index_col=None, na_values=['NA'])

#Create a new function:
def num_missing(x):
  return sum(x.isnull())

#Applying per column:
print "Missing values per column:"
print data.apply(num_missing, axis=0) #axis=0 defines that function is to be applied on each column

#Applying per row:
print "\nMissing values per row:"
print data.apply(num_missing, axis=1).head() #axis=1 defines that function is to be applied on each row




events_data[['user_id', 'day', 'timestamps']].drop_duplicates(subsets(


import datetime
d = datetime.date(2012, 12, 14)
 
print(d.year) # 2012
print(d.day)  # 14
print(d.month) # 12

print(datetime.date.today())

a = datetime.datetime.today().strftime("%Y%m%d")
print(a) # '20170405'
 
today = datetime.datetime.today()
print( today.strftime("%m/%d/%Y") ) # '04/05/2017'
 
print( today.strftime("%Y-%m-%d-%H.%M.%S") ) # 2017-04-05-00.18.00


# Значение: datetime.datetime(2017, 4, 5, 0, 18, 51, 980187)
now = datetime.datetime.now()
 
then = datetime.datetime(2017, 2, 26)
 
# Кол-во времени между датами.
delta = now - then
 
print(delta.days) # 38
print(delta.seconds) # 1131




seconds = delta.total_seconds()
hours = seconds // 3600
print(hours) # 186.0
minutes = (seconds % 3600) // 60
print(minutes) # 13.0


numbers = [2, 1, 3, 4, 7, 11, 18]
squared_numbers = map(lambda n: n**2, numbers)
odd_numbers = filter(lambda n: n % 2 == 1, numbers)


